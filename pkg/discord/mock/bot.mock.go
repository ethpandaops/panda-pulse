// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/panda-pulse/pkg/discord (interfaces: Bot)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/bot.mock.go github.com/ethpandaops/panda-pulse/pkg/discord Bot
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	grafana "github.com/ethpandaops/panda-pulse/pkg/grafana"
	hive "github.com/ethpandaops/panda-pulse/pkg/hive"
	scheduler "github.com/ethpandaops/panda-pulse/pkg/scheduler"
	store "github.com/ethpandaops/panda-pulse/pkg/store"
	gomock "go.uber.org/mock/gomock"
)

// MockBot is a mock of Bot interface.
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
	isgomock struct{}
}

// MockBotMockRecorder is the mock recorder for MockBot.
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance.
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// GetChecksRepo mocks base method.
func (m *MockBot) GetChecksRepo() *store.ChecksRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecksRepo")
	ret0, _ := ret[0].(*store.ChecksRepo)
	return ret0
}

// GetChecksRepo indicates an expected call of GetChecksRepo.
func (mr *MockBotMockRecorder) GetChecksRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksRepo", reflect.TypeOf((*MockBot)(nil).GetChecksRepo))
}

// GetGrafana mocks base method.
func (m *MockBot) GetGrafana() grafana.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrafana")
	ret0, _ := ret[0].(grafana.Client)
	return ret0
}

// GetGrafana indicates an expected call of GetGrafana.
func (mr *MockBotMockRecorder) GetGrafana() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrafana", reflect.TypeOf((*MockBot)(nil).GetGrafana))
}

// GetHive mocks base method.
func (m *MockBot) GetHive() hive.Hive {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHive")
	ret0, _ := ret[0].(hive.Hive)
	return ret0
}

// GetHive indicates an expected call of GetHive.
func (mr *MockBotMockRecorder) GetHive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHive", reflect.TypeOf((*MockBot)(nil).GetHive))
}

// GetMonitorRepo mocks base method.
func (m *MockBot) GetMonitorRepo() *store.MonitorRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorRepo")
	ret0, _ := ret[0].(*store.MonitorRepo)
	return ret0
}

// GetMonitorRepo indicates an expected call of GetMonitorRepo.
func (mr *MockBotMockRecorder) GetMonitorRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorRepo", reflect.TypeOf((*MockBot)(nil).GetMonitorRepo))
}

// GetScheduler mocks base method.
func (m *MockBot) GetScheduler() *scheduler.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduler")
	ret0, _ := ret[0].(*scheduler.Scheduler)
	return ret0
}

// GetScheduler indicates an expected call of GetScheduler.
func (mr *MockBotMockRecorder) GetScheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduler", reflect.TypeOf((*MockBot)(nil).GetScheduler))
}

// GetSession mocks base method.
func (m *MockBot) GetSession() *discordgo.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(*discordgo.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockBotMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockBot)(nil).GetSession))
}

// Start mocks base method.
func (m *MockBot) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBotMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBot)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockBot) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBotMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBot)(nil).Stop), ctx)
}
