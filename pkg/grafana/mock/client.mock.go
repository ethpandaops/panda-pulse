// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/panda-pulse/pkg/grafana (interfaces: GrafanaClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/client.mock.go github.com/ethpandaops/panda-pulse/pkg/grafana GrafanaClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	grafana "github.com/ethpandaops/panda-pulse/pkg/grafana"
	gomock "go.uber.org/mock/gomock"
)

// MockGrafanaClient is a mock of GrafanaClient interface.
type MockGrafanaClient struct {
	ctrl     *gomock.Controller
	recorder *MockGrafanaClientMockRecorder
	isgomock struct{}
}

// MockGrafanaClientMockRecorder is the mock recorder for MockGrafanaClient.
type MockGrafanaClientMockRecorder struct {
	mock *MockGrafanaClient
}

// NewMockGrafanaClient creates a new mock instance.
func NewMockGrafanaClient(ctrl *gomock.Controller) *MockGrafanaClient {
	mock := &MockGrafanaClient{ctrl: ctrl}
	mock.recorder = &MockGrafanaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrafanaClient) EXPECT() *MockGrafanaClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockGrafanaClient) Query(ctx context.Context, query string) (*grafana.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query)
	ret0, _ := ret[0].(*grafana.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockGrafanaClientMockRecorder) Query(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGrafanaClient)(nil).Query), ctx, query)
}
