---
description: Development workflow and processes for panda-pulse
alwaysApply: false
---

# Panda-Pulse Development Workflow

## Git Workflow

### Branch Strategy
- **Main Branch**: `master` - production-ready code
- **Feature Branches**: `feat/feature-name` for new features
- **Bugfix Branches**: `fix/issue-description` for bug fixes
- **Refactor Branches**: `refactor/component-name` for code improvements

### Commit Standards
- Use conventional commit format: `type(scope): description`
- Types: `feat`, `fix`, `refactor`, `test`, `docs`, `chore`
- Keep commits atomic and focused
- Write clear, descriptive commit messages
- Reference issues when applicable: `fixes #123`

### Pull Request Process
1. Create feature branch from `master`
2. Implement changes with tests
3. Ensure all tests pass locally
4. Create pull request with descriptive title and description
5. Address code review feedback
6. Merge after approval and CI success

## Testing Requirements

### Test Coverage
- Unit tests for all public functions and methods
- Integration tests for external service interactions
- Mock external dependencies appropriately
- Aim for high test coverage (>80%)

### Test Execution
```bash
# Run all tests
go test ./...

# Run tests with coverage
go test -coverprofile=coverage.out ./...
go tool cover -html=coverage.out

# Run specific package tests
go test ./pkg/analyzer/...
```

### Testing Tools
- Standard Go testing framework
- Testcontainers for integration tests
- Mock generation with `go generate` and uber-go/mock
- Stretchr/testify for assertions

## Build and Deployment

### Local Development
```bash
# Build the application
go build -o bin/panda-pulse cmd/main.go

# Run with environment variables
export GRAFANA_SERVICE_TOKEN=your_token
export DISCORD_BOT_TOKEN=your_token
./bin/panda-pulse

# Local development with docker-compose
docker-compose up s3  # Start localstack for S3
```

### Docker Build
```bash
# Build Docker image
docker build -t panda-pulse .

# Run containerized
docker run -it \
  -e GRAFANA_SERVICE_TOKEN=your_token \
  -e DISCORD_BOT_TOKEN=your_token \
  panda-pulse:latest
```

### Environment Configuration
- Use environment variables for all configuration
- Provide sensible defaults where possible
- Validate configuration at startup
- Support both production and development environments

## Code Quality

### Pre-commit Checks
- `go fmt` - code formatting
- `go vet` - static analysis
- `golint` - style checking
- `go test` - run test suite
- Build verification

### Continuous Integration
- Automated testing on pull requests
- Build verification across Go versions
- Integration test execution
- Security scanning
- Dependency vulnerability checks

### Code Review Guidelines
- Review for correctness and performance
- Ensure proper error handling
- Verify test coverage for new code
- Check for security vulnerabilities
- Validate adherence to coding standards

## Development Tools

### Required Tools
- Go 1.24+
- Docker and docker-compose
- Git
- Code editor with Go support

### Recommended Extensions
- Go language server (gopls)
- Linting integration
- Test runner integration
- Git integration

### Mock Generation
```bash
# Generate mocks for interfaces
go generate ./...

# Example mock generation comment
//go:generate mockgen -source=interface.go -destination=mock/interface.mock.go
```

## Release Process

### Version Management
- Use semantic versioning (semver)
- Tag releases in Git: `v1.2.3`
- Maintain changelog for releases
- Document breaking changes

### Release Steps
1. Update version in relevant files
2. Update CHANGELOG.md
3. Create and push release tag
4. Build and publish Docker image
5. Create GitHub release with notes

## Local Development Setup

### Environment Setup
```bash
# Clone repository
git clone https://github.com/ethpandaops/panda-pulse.git
cd panda-pulse

# Install dependencies
go mod download

# Set up local environment
cp .env.example .env  # if exists
# Edit .env with your configuration
```

### Development Services
```bash
# Start localstack for S3 testing
docker-compose up s3

# Start additional services as needed
docker-compose up grafana prometheus
```

## Troubleshooting

### Common Issues
- Missing environment variables - check configuration
- S3 connection issues - verify AWS credentials and endpoint
- Discord bot permissions - ensure proper bot setup
- Grafana connectivity - check token and base URL

### Debug Commands
```bash
# Enable debug logging
export LOG_LEVEL=debug

# Check service health
curl http://localhost:9191/health

# View metrics
curl http://localhost:9091/metrics
```

## Documentation

### Code Documentation
- Document all public APIs
- Include usage examples
- Maintain architectural decision records
- Update README.md with changes

### Deployment Documentation  
- Document environment variables
- Provide deployment examples
- Include troubleshooting guides
- Maintain operational runbooks