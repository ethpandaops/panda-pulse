---
description: Code standards and conventions for panda-pulse
globs: ["**/*.go"]
alwaysApply: false
---

# Panda-Pulse Code Standards

## Go Language Standards

### Code Style
- Follow standard Go formatting with `gofmt`
- Use `golint` and `go vet` for code quality
- Follow effective Go guidelines from golang.org
- Use meaningful variable and function names that describe their purpose

### Package Organization
- One package per directory
- Package names should be lowercase, single word
- Import statements grouped: standard library, third-party, local packages
- Separate imports with blank lines between groups

### Naming Conventions
- **Packages**: lowercase, single word (e.g., `analyzer`, `discord`, `grafana`)
- **Files**: lowercase with underscores (e.g., `cl_finalized_epoch.go`, `metrics_test.go`)
- **Types**: PascalCase for exported, camelCase for unexported
- **Functions/Methods**: PascalCase for exported, camelCase for unexported
- **Constants**: PascalCase or SCREAMING_SNAKE_CASE for package-level constants
- **Variables**: camelCase

### File Organization
- Group related functionality in the same file
- Test files alongside source files with `_test.go` suffix
- Mock implementations in `mock/` subdirectories
- Metrics in dedicated `metrics.go` files per package

## Error Handling
- Always handle errors explicitly - no silent failures
- Use wrapped errors with context: `fmt.Errorf("operation failed: %w", err)`
- Return errors as the last return value
- Use meaningful error messages that help with debugging
- Log errors at appropriate levels (Error, Warn, Info, Debug)

## Logging Standards
- Use structured logging with logrus
- Include relevant context in log messages
- Use appropriate log levels:
  - **Error**: System errors, failed operations
  - **Warn**: Recoverable issues, deprecated usage
  - **Info**: Important system events, service start/stop
  - **Debug**: Detailed operational information

### Log Message Format
```go
log.WithFields(logrus.Fields{
    "component": "analyzer",
    "check_id":  checkID,
    "network":   network,
}).Info("Starting health check")
```

## Testing Standards
- Write unit tests for all public functions and methods
- Use table-driven tests when testing multiple scenarios
- Mock external dependencies using interfaces and generated mocks
- Test error conditions and edge cases
- Use testcontainers for integration tests requiring external services

### Test Structure
```go
func TestFunctionName(t *testing.T) {
    tests := []struct {
        name    string
        input   InputType
        want    OutputType
        wantErr bool
    }{
        // test cases
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // test implementation
        })
    }
}
```

## Interface Design
- Keep interfaces small and focused (interface segregation)
- Define interfaces in the package that uses them, not implements them
- Use meaningful interface names ending in "-er" when appropriate
- Document interface contracts clearly

## Configuration Management
- Use environment variables for configuration
- Provide sensible defaults where possible
- Validate configuration at startup
- Group related configuration in structs
- Use explicit types for configuration values (not just strings)

## Metrics and Observability
- Expose Prometheus metrics for monitoring
- Use consistent metric naming: `component_operation_total`, `component_duration_seconds`
- Include relevant labels but avoid high cardinality
- Initialize metrics at service startup
- Document metric meanings and usage

## Context Usage
- Pass context as first parameter to functions that may be cancelled
- Respect context cancellation in long-running operations
- Use context for request-scoped values (with caution)
- Don't store context in structs - pass it explicitly

## Concurrency Patterns
- Use channels for communication between goroutines
- Prefer sync package primitives for simple synchronization
- Always handle goroutine cleanup properly
- Use context for cancellation signals
- Avoid shared mutable state when possible

## Documentation
- Document all exported types, functions, and constants
- Use standard Go doc comment format
- Include examples for complex APIs
- Keep documentation up to date with code changes
- Explain the "why" not just the "what"

## Security Considerations
- Never log sensitive information (tokens, keys, passwords)
- Validate all external inputs
- Use appropriate authentication and authorization
- Handle secrets securely through environment variables
- Be cautious with user-provided data in Discord commands